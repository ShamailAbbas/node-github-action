# Name of the workflow
name: Docker Build, Scan, and Push with Email Notifications

# Trigger the workflow on push or pull request to the 'main' branch
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

# Environment variables for Docker Hub repository and image name
env:
  DOCKER_HUB_REPOSITORY: thallavi/node-github-action # Replace with your Docker Hub repo
  IMAGE_NAME: node-github-action # Replace with your Docker image name
  EMAIL_TO: shamailabbas61@gmail.com # Email address to send notifications

# Define the jobs
jobs:
  # Job 1: Build the Docker image
  build:
    runs-on: ubuntu-latest # Use the latest Ubuntu runner
    outputs:
      image-tag: ${{ steps.build-image.outputs.image-tag }} # Output the image tag for use in other jobs

    steps:
      # Step 1: Checkout the code from the repository
      - name: Checkout repository
        uses: actions/checkout@v3 # Official GitHub Action to checkout code

      # Step 2: Set up Docker Buildx for advanced Docker builds (e.g., multi-platform builds)
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # Step 3: Log in to Docker Hub using credentials stored in GitHub Secrets
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }} # Docker Hub username from secrets
          password: ${{ secrets.DOCKER_HUB_TOKEN }} # Docker Hub token/password from secrets

      # Step 4: Build the Docker image
      - name: Build Docker image
        id: build-image
        run: |
          # Build the Docker image and tag it with:
          # 1. The Git commit SHA for versioning
          # 2. The 'latest' tag for the most recent build
          docker build -t ${{ env.DOCKER_HUB_REPOSITORY }}:${{ github.sha }} -t ${{ env.DOCKER_HUB_REPOSITORY }}:latest .
          echo "image-tag=${{ github.sha }}" >> $GITHUB_OUTPUT  # Save the image tag as an output

      # Step 5: Save the Docker image as an artifact for use in other jobs
      - name: Save Docker image as artifact
        uses: actions/upload-artifact@v3
        with:
          name: docker-image # Name of the artifact
          path: /tmp/docker-image.tar # Path to save the Docker image
          retention-days: 1 # Keep the artifact for 1 day

      # Step 6: Send email notification for build success or failure
      - name: Send build status email
        if: always() # Always run this step, even if previous steps fail
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.gmail.com # SMTP server address
          server_port: 465 # SMTP server port
          username: ${{ secrets.EMAIL_USERNAME }} # Email username (e.g., your Gmail)
          password: ${{ secrets.EMAIL_PASSWORD }} # Email password or app-specific password
          subject: "Build Status: ${{ job.status }}" # Email subject
          body: |
            The build job has completed with status: ${{ job.status }}.
            Check the workflow run for details: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
          to: ${{ env.EMAIL_TO }} # Email recipient
          from: ${{ secrets.EMAIL_USERNAME }} # Email sender
          content_type: text/plain # Email content type

  # Job 2: Scan the filesystem for vulnerabilities
  scan-filesystem:
    runs-on: ubuntu-latest # Use the latest Ubuntu runner
    needs: build # This job depends on the 'build' job

    steps:
      # Step 1: Checkout the code from the repository
      - name: Checkout repository
        uses: actions/checkout@v3

      # Step 2: Scan the filesystem for vulnerabilities using Trivy
      - name: Scan filesystem for vulnerabilities
        uses: aquasecurity/trivy-action@master # Official Trivy Action for scanning
        with:
          scan-type: "fs" # Scan the filesystem
          scan-ref: "." # Scan the current directory (repository root)
          exit-code: "1" # Fail the workflow if vulnerabilities are found
          format: "table" # Output results in a table format

      # Step 3: Send email notification for filesystem scan success or failure
      - name: Send filesystem scan status email
        if: always() # Always run this step, even if previous steps fail
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.gmail.com # SMTP server address
          server_port: 465 # SMTP server port
          username: ${{ secrets.EMAIL_USERNAME }} # Email username (e.g., your Gmail)
          password: ${{ secrets.EMAIL_PASSWORD }} # Email password or app-specific password
          subject: "Filesystem Scan Status: ${{ job.status }}" # Email subject
          body: |
            The filesystem scan job has completed with status: ${{ job.status }}.
            Check the workflow run for details: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
          to: ${{ env.EMAIL_TO }} # Email recipient
          from: ${{ secrets.EMAIL_USERNAME }} # Email sender
          content_type: text/plain # Email content type

  # Job 3: Scan dependencies for vulnerabilities using OWASP Dependency-Check
  scan-dependencies:
    runs-on: ubuntu-latest # Use the latest Ubuntu runner
    needs: build # This job depends on the 'build' job

    steps:
      # Step 1: Checkout the code from the repository
      - name: Checkout repository
        uses: actions/checkout@v3

      # Step 2: Install Java (required for OWASP Dependency-Check)
      - name: Set up Java
        uses: actions/setup-java@v3
        with:
          distribution: "temurin" # Use Temurin (Adoptium) Java distribution
          java-version: "17" # Use Java 17

      # Step 3: Run OWASP Dependency-Check to scan dependencies for vulnerabilities
      - name: Run Dependency-Check
        uses: owasp/dependency-check-action@v3 # Official OWASP Dependency-Check Action
        with:
          project: "node-github-action" # Name of your project
          scan-dir: "." # Directory to scan (root directory)
          format: "HTML" # Report format (HTML, JSON, XML, etc.)
          fail-on-cvss: 8 # Fail the workflow if vulnerabilities with CVSS score >= 8 are found

      # Step 4: Upload the Dependency-Check report as an artifact
      - name: Upload Dependency-Check report
        uses: actions/upload-artifact@v3
        with:
          name: dependency-check-report # Name of the artifact
          path: dependency-check-report.html # Path to the report file

      # Step 5: Send email notification for dependency scan success or failure
      - name: Send dependency scan status email
        if: always() # Always run this step, even if previous steps fail
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.gmail.com # SMTP server address
          server_port: 465 # SMTP server port
          username: ${{ secrets.EMAIL_USERNAME }} # Email username (e.g., your Gmail)
          password: ${{ secrets.EMAIL_PASSWORD }} # Email password or app-specific password
          subject: "Dependency Scan Status: ${{ job.status }}" # Email subject
          body: |
            The dependency scan job has completed with status: ${{ job.status }}.
            Check the workflow run for details: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
          to: ${{ env.EMAIL_TO }} # Email recipient
          from: ${{ secrets.EMAIL_USERNAME }} # Email sender
          content_type: text/plain # Email content type

  # Job 4: Scan the Docker image for vulnerabilities
  scan-image:
    runs-on: ubuntu-latest # Use the latest Ubuntu runner
    needs: build # This job depends on the 'build' job

    steps:
      # Step 1: Download the Docker image artifact from the 'build' job
      - name: Download Docker image artifact
        uses: actions/download-artifact@v3
        with:
          name: docker-image # Name of the artifact to download
          path: /tmp # Path to save the downloaded artifact

      # Step 2: Load the Docker image from the artifact
      - name: Load Docker image
        run: docker load -i /tmp/docker-image.tar

      # Step 3: Scan the Docker image for vulnerabilities using Trivy
      - name: Scan Docker image for vulnerabilities
        uses: aquasecurity/trivy-action@master # Official Trivy Action for scanning
        with:
          image-ref: "${{ env.DOCKER_HUB_REPOSITORY }}:${{ needs.build.outputs.image-tag }}" # Scan the Docker image built earlier
          format: "table" # Output results in a table format
          exit-code: "1" # Fail the workflow if vulnerabilities are found

      # Step 4: Send email notification for image scan success or failure
      - name: Send image scan status email
        if: always() # Always run this step, even if previous steps fail
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.gmail.com # SMTP server address
          server_port: 465 # SMTP server port
          username: ${{ secrets.EMAIL_USERNAME }} # Email username (e.g., your Gmail)
          password: ${{ secrets.EMAIL_PASSWORD }} # Email password or app-specific password
          subject: "Image Scan Status: ${{ job.status }}" # Email subject
          body: |
            The image scan job has completed with status: ${{ job.status }}.
            Check the workflow run for details: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
          to: ${{ env.EMAIL_TO }} # Email recipient
          from: ${{ secrets.EMAIL_USERNAME }} # Email sender
          content_type: text/plain # Email content type

  # Job 5: Push the Docker image to Docker Hub
  push:
    runs-on: ubuntu-latest # Use the latest Ubuntu runner
    needs: [scan-filesystem, scan-dependencies, scan-image] # This job depends on all scanning jobs

    steps:
      # Step 1: Download the Docker image artifact from the 'build' job
      - name: Download Docker image artifact
        uses: actions/download-artifact@v3
        with:
          name: docker-image # Name of the artifact to download
          path: /tmp # Path to save the downloaded artifact

      # Step 2: Load the Docker image from the artifact
      - name: Load Docker image
        run: docker load -i /tmp/docker-image.tar

      # Step 3: Log in to Docker Hub using credentials stored in GitHub Secrets
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }} # Docker Hub username from secrets
          password: ${{ secrets.DOCKER_HUB_TOKEN }} # Docker Hub token/password from secrets

      # Step 4: Push the Docker image to Docker Hub
      - name: Push Docker image
        run: |
          # Push both tags to Docker Hub:
          # 1. The Git commit SHA tag
          # 2. The 'latest' tag
          docker push ${{ env.DOCKER_HUB_REPOSITORY }}:${{ needs.build.outputs.image-tag }}
          docker push ${{ env.DOCKER_HUB_REPOSITORY }}:latest

      # Step 5: Send email notification for push success or failure
      - name: Send push status email
        if: always() # Always run this step, even if previous steps fail
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.gmail.com # SMTP server address
          server_port: 465 # SMTP server port
          username: ${{ secrets.EMAIL_USERNAME }} # Email username (e.g., your Gmail)
          password: ${{ secrets.EMAIL_PASSWORD }} # Email password or app-specific password
          subject: "Push Status: ${{ job.status }}" # Email subject
          body: |
            The push job has completed with status: ${{ job.status }}.
            Check the workflow run for details: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
          to: ${{ env.EMAIL_TO }} # Email recipient
          from: ${{ secrets.EMAIL_USERNAME }} # Email sender
          content_type: text/plain # Email content type
